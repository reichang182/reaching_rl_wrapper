#!/usr/bin/env python3
"""Run RL training experiments with multiple random seeds.

Results are logged to a wandb project named with timestamp.
Simply calls train_rl.py with different seeds, using all other default values.
"""

import argparse
import json
import os
import subprocess
import sys
from datetime import datetime
from pathlib import Path

import numpy as np


def generate_random_seeds(n_seeds, base_seed=None):
    """Generate n random seeds for experiments."""
    if base_seed is not None:
        np.random.seed(base_seed)
    seeds = np.random.randint(0, 1_000_000, size=n_seeds)
    return seeds.tolist()


def run_single_experiment(seed, project_name):
    """Run a single training experiment with given seed."""
    # Construct command - just call train_rl.py with the seed
    cmd = [
        sys.executable,
        "scripts/train_rl.py",
        "--seed",
        str(seed),
    ]

    # Set environment variables for wandb
    env = os.environ.copy()
    env["WANDB_PROJECT"] = project_name

    # Run name will be automatically generated by train_rl.py based on its defaults
    # but we can override if needed
    # env["WANDB_RUN_NAME"] = f"run_seed{seed}"

    print(f"\n{'='*60}")
    print(f"Running experiment with seed {seed}")
    print(f"Project: {project_name}")
    print(f"Command: {' '.join(cmd)}")
    print(f"{'='*60}\n")

    # Run the experiment
    try:
        result = subprocess.run(cmd, env=env, check=True)
        return {"seed": seed, "status": "success", "return_code": result.returncode}
    except subprocess.CalledProcessError as e:
        print(f"Error running seed {seed}: {e}")
        return {"seed": seed, "status": "failed", "return_code": e.returncode}
    except Exception as e:
        print(f"Unexpected error for seed {seed}: {e}")
        return {"seed": seed, "status": "error", "error": str(e)}


def main():
    parser = argparse.ArgumentParser(description="Run multi-seed RL experiments")

    # Multi-seed specific arguments
    parser.add_argument("--n_seeds", type=int, default=5, help="Number of random seeds to run")
    parser.add_argument(
        "--base_seed", type=int, default=None, help="Base seed for generating random seeds"
    )
    parser.add_argument(
        "--project_suffix", type=str, default="", help="Suffix for wandb project name"
    )
    parser.add_argument("--parallel", action="store_true", help="Run experiments in parallel")
    parser.add_argument("--max_parallel", type=int, default=2, help="Maximum parallel experiments")

    args = parser.parse_args()

    # Generate timestamp for project name
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    project_name = f"rl_experiments_{timestamp}"
    if args.project_suffix:
        project_name += f"_{args.project_suffix}"

    # Generate seeds
    seeds = generate_random_seeds(args.n_seeds, args.base_seed)
    print(f"Generated seeds: {seeds}")

    # Create experiment directory
    exp_dir = Path(f"./experiments/{project_name}")
    exp_dir.mkdir(parents=True, exist_ok=True)

    # Save experiment configuration
    config = {
        "project_name": project_name,
        "timestamp": timestamp,
        "n_seeds": args.n_seeds,
        "seeds": seeds,
        "base_seed": args.base_seed,
        "note": "Using all default values from train_rl.py except seed",
    }

    with open(exp_dir / "config.json", "w") as f:
        json.dump(config, f, indent=2)

    # Run experiments
    results = []

    if args.parallel:
        # Parallel execution using multiprocessing
        from functools import partial
        from multiprocessing import Pool

        run_func = partial(run_single_experiment, project_name=project_name)

        with Pool(processes=min(args.max_parallel, len(seeds))) as pool:
            results = pool.map(run_func, seeds)
    else:
        # Sequential execution
        for seed in seeds:
            result = run_single_experiment(seed, project_name)
            results.append(result)

    # Save results
    results_file = exp_dir / "results.json"
    with open(results_file, "w") as f:
        json.dump(results, f, indent=2)

    # Print summary
    print(f"\n{'='*60}")
    print("EXPERIMENT SUMMARY")
    print(f"{'='*60}")
    print(f"Project: {project_name}")
    print(f"Total experiments: {len(seeds)}")

    successful = sum(1 for r in results if r["status"] == "success")
    failed = sum(1 for r in results if r["status"] == "failed")
    errors = sum(1 for r in results if r["status"] == "error")

    print(f"Successful: {successful}")
    print(f"Failed: {failed}")
    print(f"Errors: {errors}")
    print(f"\nResults saved to: {results_file}")
    print(f"Experiment config saved to: {exp_dir / 'config.json'}")

    # Print individual results
    print("\nIndividual results:")
    for result in results:
        status_emoji = "✅" if result["status"] == "success" else "❌"
        print(f"  Seed {result['seed']}: {status_emoji} {result['status']}")

    return 0 if successful == len(seeds) else 1


if __name__ == "__main__":
    sys.exit(main())
